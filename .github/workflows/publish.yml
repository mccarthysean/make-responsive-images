name: Publish

on:
  release:
    types:
      - created

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          python get-poetry.py -y
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install Dependencies
        run: poetry install

      - name: Publish
        env:
            PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
            # PYPI_TOKEN_TEST: ${{ secrets.PYPI_TOKEN_TEST }}
            # PYPI_USERNAME_TEST: ${{ secrets.PYPI_USERNAME_TEST }}
            # PYPI_PASSWORD_TEST: ${{ secrets.PYPI_PASSWORD_TEST }}
        run: |
          # poetry config pypi-token.pypi $PYPI_TOKEN_TEST
          # poetry config repositories.testpypi https://test.pypi.org/legacy/
          # bash scripts/poetry_publish_package_test.sh
          bash scripts/poetry_publish_package_prod.sh