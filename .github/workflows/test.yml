name: Test

on:
  push:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        # python-version: [3.6]
        poetry-version: [1.1.11]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      # - name: Set up cache
      #   uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      # - name: Ensure cache is healthy
      #   if: steps.cache.outputs.cache-hit == 'true'
      #   run: poetry run pip --version >/dev/null 2>&1 || echo "Not healthy"
      - name: Install Dependencies
        run: poetry install
      - name: Test
        run: poetry run bash scripts/test.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
      - name: Code Quality Checks
        run: poetry run bash scripts/lint_check.sh
        
  # code-quality:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.6]
  #       poetry-version: [1.1.11]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Run image
  #       uses: abatilo/actions-poetry@v2.0.0
  #       with:
  #         poetry-version: ${{ matrix.poetry-version }}
  #     # - name: Set up cache
  #     #   uses: actions/cache@v1
  #     #   id: cache
  #     #   with:
  #     #     path: .venv
  #     #     key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
  #     # - name: Ensure cache is healthy
  #     #   if: steps.cache.outputs.cache-hit == 'true'
  #     #   run: poetry run pip --version >/dev/null 2>&1 || echo "Not healthy"
  #     - name: Install dependencies
  #       run: poetry install
  #     - name: Run black
  #       run: poetry run black . --check
  #     - name: Run isort
  #       run: poetry run isort . --check-only --profile black
  #     - name: Run flake8
  #       run: poetry run flake8 .
  #     - name: Run bandit
  #       run: |
  #         poetry run bandit -r "./make_responsive_images"
  #         poetry run bandit -r "./tests" --configfile "./.bandit_4_tests.yml"
  #     - name: Run saftey
  #       run: poetry run safety check